package com.netease.nim.uikit.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.netease.nim.uikit.green_dao.SystemMessageDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_MESSAGE_DB".
*/
public class SystemMessageDBDao extends AbstractDao<SystemMessageDB, Long> {

    public static final String TABLENAME = "SYSTEM_MESSAGE_DB";

    /**
     * Properties of entity SystemMessageDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MessageId = new Property(0, long.class, "messageId", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Note = new Property(3, String.class, "note", false, "NOTE");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateTimestamp = new Property(5, String.class, "createTimestamp", false, "CREATE_TIMESTAMP");
        public final static Property Data = new Property(6, String.class, "data", false, "DATA");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
        public final static Property UnreadTag = new Property(8, int.class, "unreadTag", false, "UNREAD_TAG");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property TargetId = new Property(10, long.class, "targetId", false, "TARGET_ID");
    }


    public SystemMessageDBDao(DaoConfig config) {
        super(config);
    }
    
    public SystemMessageDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_MESSAGE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: messageId
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"TITLE\" TEXT," + // 2: title
                "\"NOTE\" TEXT," + // 3: note
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"CREATE_TIMESTAMP\" TEXT," + // 5: createTimestamp
                "\"DATA\" TEXT," + // 6: data
                "\"TYPE\" INTEGER NOT NULL ," + // 7: type
                "\"UNREAD_TAG\" INTEGER NOT NULL ," + // 8: unreadTag
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"TARGET_ID\" INTEGER NOT NULL );"); // 10: targetId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_MESSAGE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemMessageDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
        stmt.bindLong(2, entity.getTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String createTimestamp = entity.getCreateTimestamp();
        if (createTimestamp != null) {
            stmt.bindString(6, createTimestamp);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(7, data);
        }
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getUnreadTag());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getTargetId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemMessageDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
        stmt.bindLong(2, entity.getTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String createTimestamp = entity.getCreateTimestamp();
        if (createTimestamp != null) {
            stmt.bindString(6, createTimestamp);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(7, data);
        }
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getUnreadTag());
        stmt.bindLong(10, entity.getStatus());
        stmt.bindLong(11, entity.getTargetId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SystemMessageDB readEntity(Cursor cursor, int offset) {
        SystemMessageDB entity = new SystemMessageDB( //
            cursor.getLong(offset + 0), // messageId
            cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // note
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createTimestamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // data
            cursor.getInt(offset + 7), // type
            cursor.getInt(offset + 8), // unreadTag
            cursor.getInt(offset + 9), // status
            cursor.getLong(offset + 10) // targetId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemMessageDB entity, int offset) {
        entity.setMessageId(cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTimestamp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setData(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setUnreadTag(cursor.getInt(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setTargetId(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemMessageDB entity, long rowId) {
        entity.setMessageId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemMessageDB entity) {
        if(entity != null) {
            return entity.getMessageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemMessageDB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
