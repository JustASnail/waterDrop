package com.netease.nim.uikit.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.netease.nim.uikit.green_dao.FriendDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_DB".
*/
public class FriendDBDao extends AbstractDao<FriendDB, Long> {

    public static final String TABLENAME = "FRIEND_DB";

    /**
     * Properties of entity FriendDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FUid = new Property(0, long.class, "fUid", true, "_id");
        public final static Property FNeteaseAccid = new Property(1, String.class, "fNeteaseAccid", false, "F_NETEASE_ACCID");
        public final static Property FNeteaseToken = new Property(2, String.class, "fNeteaseToken", false, "F_NETEASE_TOKEN");
        public final static Property FNickName = new Property(3, String.class, "fNickName", false, "F_NICK_NAME");
        public final static Property FPhoto = new Property(4, String.class, "fPhoto", false, "F_PHOTO");
        public final static Property Note = new Property(5, String.class, "note", false, "NOTE");
        public final static Property FUserDesc = new Property(6, String.class, "fUserDesc", false, "F_USER_DESC");
        public final static Property RelationStatus = new Property(7, int.class, "relationStatus", false, "RELATION_STATUS");
    }


    public FriendDBDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: fUid
                "\"F_NETEASE_ACCID\" TEXT," + // 1: fNeteaseAccid
                "\"F_NETEASE_TOKEN\" TEXT," + // 2: fNeteaseToken
                "\"F_NICK_NAME\" TEXT," + // 3: fNickName
                "\"F_PHOTO\" TEXT," + // 4: fPhoto
                "\"NOTE\" TEXT," + // 5: note
                "\"F_USER_DESC\" TEXT," + // 6: fUserDesc
                "\"RELATION_STATUS\" INTEGER NOT NULL );"); // 7: relationStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFUid());
 
        String fNeteaseAccid = entity.getFNeteaseAccid();
        if (fNeteaseAccid != null) {
            stmt.bindString(2, fNeteaseAccid);
        }
 
        String fNeteaseToken = entity.getFNeteaseToken();
        if (fNeteaseToken != null) {
            stmt.bindString(3, fNeteaseToken);
        }
 
        String fNickName = entity.getFNickName();
        if (fNickName != null) {
            stmt.bindString(4, fNickName);
        }
 
        String fPhoto = entity.getFPhoto();
        if (fPhoto != null) {
            stmt.bindString(5, fPhoto);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
 
        String fUserDesc = entity.getFUserDesc();
        if (fUserDesc != null) {
            stmt.bindString(7, fUserDesc);
        }
        stmt.bindLong(8, entity.getRelationStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFUid());
 
        String fNeteaseAccid = entity.getFNeteaseAccid();
        if (fNeteaseAccid != null) {
            stmt.bindString(2, fNeteaseAccid);
        }
 
        String fNeteaseToken = entity.getFNeteaseToken();
        if (fNeteaseToken != null) {
            stmt.bindString(3, fNeteaseToken);
        }
 
        String fNickName = entity.getFNickName();
        if (fNickName != null) {
            stmt.bindString(4, fNickName);
        }
 
        String fPhoto = entity.getFPhoto();
        if (fPhoto != null) {
            stmt.bindString(5, fPhoto);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
 
        String fUserDesc = entity.getFUserDesc();
        if (fUserDesc != null) {
            stmt.bindString(7, fUserDesc);
        }
        stmt.bindLong(8, entity.getRelationStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FriendDB readEntity(Cursor cursor, int offset) {
        FriendDB entity = new FriendDB( //
            cursor.getLong(offset + 0), // fUid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fNeteaseAccid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fNeteaseToken
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fNickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fPhoto
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // note
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fUserDesc
            cursor.getInt(offset + 7) // relationStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendDB entity, int offset) {
        entity.setFUid(cursor.getLong(offset + 0));
        entity.setFNeteaseAccid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFNeteaseToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFUserDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRelationStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendDB entity, long rowId) {
        entity.setFUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendDB entity) {
        if(entity != null) {
            return entity.getFUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendDB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
